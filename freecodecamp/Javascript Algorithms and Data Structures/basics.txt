# Data types

null, undefined, boolean, string, symbol, number, object

To define a variable, use `var` keyword.
eg. var xyz;

If we don't declare a variable value, it has `undefined` value by default. If we do mathematical operations on it, it will result into `NaN`;



# string
Similar to Python both of the following syntaxes are same
var helloWorld = 'Hello "world"';
var helloWorld = "Hello 'world'";



# string properties
var len = "Hello World".length;   // 11
var firstLetter = "Hello World"[0];  // H

Strings are immutable in JavaScript just like Java.
so, following thing is not possible:
var xyz = "abc;
xyz[0] = "1";  // IS NOT POSSIBLE


# Arrays
var sandwich = ["bread", "cabbage", "tomato", "onion", "sauce", "bread"];
Arrays can be printed with alert();
Arrays can have different datatype data;
eg. var array = ["abc", 123];

Arrays can have nested arrays
eg. var array = [[1, 2, "abc"], [5]];

Array access is possible with spaces, but not recommended.
eg. array[0] AND array [0] is possible


Multidimensional / nested arrays can be accessed easily.
var array = [
  [1,2,3],
  [4,5,6],
  [7,8,9],
  [[10,11,12], 13, 14]
];

alert(array[3][0][2]);  // 12


Arrays is a stack by default in JavaScript;
So push() & pop() methods are already present to append and remove the data at the end of the array.

* Array Shift Operation
It's similar to pop(), however it works from start to end of the array.


push() /* end of array */ =  unshift() /* start of array */
pop()  /* end of array */ =  shift()   /* start of array */


# Functions
// function example
function myFunction() {
	console.log("My function");
}

// simple function call
myFunction();


* function with arguments
function func(one, two) {
	console.log(one + two);
}
func(1, 2);


******************************************************************
# Varible scope
Variables declared without scope are global.
Not a good practice. Always declare with var keyword.
eg. 
function c() {
	a = 4;
}

function d() {
	alert(a);
}

c();
d();

This will create an alert with 4 value.


// Local scope
function myTest() {
  var loc = "foo";
  console.log(loc);
}
myTest(); // logs "foo"
console.log(loc); // loc is not defined



# Queue Representation in JavaScript
Queue can be simply represented in an array.
Use push and shift functions to simulate a queue;



# Equality

== doesn't check dataTypes (Not strict)
=== checks dataTypes (Strict)

!=  inequality (Will cast)
!== strict inequality (Won't cast)



3 == 3    // true
3 == '3'  // true

3 === 3    // true
3 === '3'  // false


# typeof
typeof operator returns type of the variable.
eg. alert(typeof '3');


# > and < and <= and >=
These operators DO CONVERT DATATYPES (cast) while comparing.
i.e. '3' < 5 is a valid comparison


# Switch case

switch(variable) {
	case x:
		doSomething();
		break;
	default:
		doDefaultThing();
		break;
}

* Switch case behaves slightly differently in Javascript. 
* Strict equality check is done (i.e. === for comparison) in switch case. 
* Multiple datatypes can be used in switch case.

